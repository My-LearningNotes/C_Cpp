条件编译
========


什么是条件编译
--------------

条件编译，字面意思就是\ *根据给定的条件编译*\ 。
也就是在\ **预处理阶段**\ ，预处理器通过给定的条件来保留某些代码，以及去掉某些代码。
这样，在编译时就只编译保留的代码。

一般情况下，源代码中的每一行都要被编译，但有时候出于对代码优化或其它方面的考虑，我们只希望对其中一部分内容进行编译，
此时就需要在程序中使用条件编译，让编译器只对满足条件的代码进行编译，将不满足条件的代码舍弃。


条件编译的意义
--------------

对于跨平台程序，需要在同一个程序中编写针对不同情况（比如不同OS，硬件环境）的代码，编译程序时为了编译得到针对不同情况的可执行程序，我们需要使用条件编译来做选择。

.. note::

    为什么不直接全部编译呢？

    这样会导致程序较大，因为里面不仅包含了我们需要的代码，还包含了很多用不到的代码。
    但是使用条件编译将不需要的代码去掉后，就不存在这样的情况了。
    程序变小之后，不管是静态存储在硬盘上，还是运行在内存中，都会节省计算机的硬盘空间和内存空间。


条件编译相关的预处理指令
------------------------

和条件编译相关的预处理指令:

-  ``#define`` - 定义一个宏

.. code-block:: c++
   :emphasize-lines: 1
 
   // 宏名通常大写
   #define MACRO_NAME[(args)] [tokens[(opt)]]

.. note::

   在预处理阶段，代码中在宏定义之后出现的\ ``MACRO_NAME``\ 将被替换为所定义的标记(tokens)。
   
   宏定义按照是否带参数，通常分为对象宏，函数宏两种。
   对象宏: 不带参数的宏，多用于定义常量，通用标识。

    * 定义预编译宏

    .. code-block:: c++

       // 只定义一个宏名
       // 后续可以根据判断该宏是否定义，编译或不编译相应的代码
       #define MACRO_NAME


-  ``#undef`` - 取消一个宏的定义

-  ``#if``\ 和\ ``#elif`` - 预处理中的条件指令, 用于对\ **常量表达式**\ 进行判断。

.. code-block:: c++
   :emphasize-lines: 1, 3, 5, 7, 9

   #if 常量表达式1
   // ... some codes
   #elif 常量表达式2
   // ... other codes
   #elif 常量表达式3
   // ...
   #else
   // ...
   #endif

\ 

    * 常量表达式可以是包含宏，算术运算符，逻辑运算符等的合法C常量表达式。

    .. warning::

       未定义的宏或者没有指定其代表的值的宏，其值被视为0

    * 在判断某个宏是否定义时，应当避免使用\ ``#if``\ ，因为该宏的值可能就是被定义为\ *0*\ ，应当使用\ ``#ifdef``\ 或\ ``#ifndef``\ 。


-  ``#ifdef`` - 判断某个宏是否定义

-  ``#ifndef`` - 判断某个宏是否未定义

.. note::

    #ifdef和#ifndef仅支持判断单个宏是否定义。

-  ``defined`` - 测试某个宏是否定义，若宏被定义返回1，否则返回0

.. code-block:: c++
   :emphasize-lines: 1

   defined(MACRO_NAME)

\

    ``defined``\ 可以和\ ``#if``\ ,\ ``#elif``\ 和\ ``#else``\ 结合使用来判断宏是否定义，乍一看好像它显得多余，因为已经有了\ ``#ifdef``\ 和\ ``#ifndef``\ ；
    但是\ ``#ifdef``\ 和\ ``#ifndef``\ 只能判断一个宏是否定义，\ ``defined``\ 可以用在一条判断语句中声明多个判别条件。

    .. code-block::
       :emphasize-lines: 1

       #if defined(VAX) && defined(UNIX) && !defined(DEBUG)

-  ``#else``

-  ``#endif`` - 与\ ``#if``, ``#ifdef``,
   ``#ifndef``\ 成对使用，每个\ ``#if``, ``#ifdef``,
   ``#ifndef``\ d都要有一个对应的\ ``#endif``

-  ``defined`` - 与\ ``#if``\ ， ``#elif``\ 配合使用，判断某个宏是否定义


条件编译的排版
--------------

-  条件编译没有相互嵌套时，所有条件编译关键字语句顶格左对齐

-  条件编译之间有嵌套时，嵌套的条件编译需要缩进，如果里面包含\ ``#define``\ 和\ ``#include``\ ，\ ``define``\ 和\ ``include``\ 也需要缩进。

.. note::

    ``#``\ 不缩进，\ ``#``\ 之后的单词缩进


条件编译的常用使用情景
----------------------

-  最常见的条件编译是防止头文件重复包含的宏

    .. code-block:: c++

        #ifndef ABCD_H
        #define ABCD_H

        /* ... */

        #endif

-  根据操作系统的类型，执行不同的代码

    .. code-block:: c++

        #ifdef _WIN32

        /* ... */

        #endif

-  根据一些条件/宏来执行或不执行某些代码

    .. code-block:: c++

        #ifdef _DEBUG

        /* ... */

        #endif
