什么是泛型和泛型编程?
=====================

先来看一个例子, 假设现在需要一个函数, 功能是返回两个int类型数据中较大的那个, 我们通常会编写如下代码:

.. code-block:: cpp

    int max(int x, int y)
    {
   	    return (x > y) ? x : y;
    }

如果这时又需要一个函数返回两个double类型数据中较大的那个, 于是我们需要对之前的代码进行修改:

.. code-block:: cpp

    double max(double x, double y)
    {
   	    return (x > y) ? x : y;
    }

之后，又需要再编写一个能返回两个char类型数据中较大的那个......

可以看到, 只是因为数据类型的不同, 就迫使我们不得不把具有相同功能的代码重复编写若干遍.

在计算机程序设计领域, 为了避免因数据类型的不同, 而被迫重复编写大量相同业务逻辑的代码, 发展出了泛型以及泛型编程技术.

什么是泛型呢?

所谓泛型, 实质上就是不使用具体数据类型(例如int, double, float等), 而是使用一种通用类型来进行程序设计的方法, 该方法可以大规模的减少程序代码的编写量, 让程序员可以集中精力用于业务逻辑的实现.

使用泛型编程解决上面的问题，将代码修改如下:

.. code-block:: cpp

    T max(T x, T y)
    {
   	    return (x > y) ? x : y;
    }

当用户需要某个具体数据类型的\ ``max``\ 函数时, 只需要把其中的T替换成实际的数据类型就行了.

那么, 代码中的\ ``T``\ 是什么呢?
    就是一个占位符, 更确切的说是一个类型占位符.

    也就是说, 使用时会用一个具体的数据类型替换T, 至于是哪个数据类型, 由用户在使用时指定.

    如果要把\ ``T``\ 这种类型占位符也叫做一种数据类型, 我们就称之为\ **泛型(generic type)**\ ;
    而使用这种类型占位符的编程方式就称为\ **泛型编程**\ .

.. attention::

    泛型, 不是某一种具体的数据类型, 是一种用来替换所有类型的"通用类型", 是一个类型占位符.

因为泛型不是具体的数据类型, 使用泛型编写的代码也就不是真正的程序实体, 只能算是一个程序实体的样板.
故此, 通常形象的将这种使用了泛型的代码称为\ **模板**\ , 由模板生成实际代码的过程称为\ **模板的具体化**\ .
注意, 模板的具体化, 即类型占位符的替换工作, 是由编译器在编译阶段自动完成的.


总结
----

总之一句话，泛型也是一种数据类型，不过它不是某一种具体的数据类型, 而是一种用来代替所有类型的"通用类型".

泛型编程, 就是使用了泛型的编程方式.

--------------

参考:

`泛型是什么，C++泛型编程又是什么? <http://c.biancheng.net/view/6520.html>`__
